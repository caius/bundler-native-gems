#!/usr/bin/env ruby

require "bundler/cli"
require "terminal-table"

class NativeGems

  attr_reader :with, :without

  def initialize(options)
    @with = Array(options["with"]).map(&:to_sym)
    @without = Array(options["without"]).map(&:to_sym)
  end

  def run
    groups = definition.groups - without + with
    resolved_specs = definition.specs_for(groups).to_a
    native_specs = resolved_specs.select { |spec| spec.extensions.any? }

    output = if $stdout.tty?
      rows = [["Name", "Version"]]
      output = Terminal::Table.new do |t|
        t << ["Name", "Version"]
        t << :separator
        native_specs.each do |spec|
          t << [spec.name, spec.version]
        end
      end
    else
      native_specs.map { |spec| "#{spec.name}\t#{spec.version}" }
    end

    $stdout.puts output
  end

  private

  def definition
    Bundler.definition
  end
end

class CLI < Bundler::CLI
  def initialize(*)
    super
    # Replace `help` with Thor's version, not Bundler::CLI's
    self.class.superclass.superclass.instance_method(:help).bind(self)
  end

  desc "native_gems [OPTIONS]", "Lists the gems with native extensions"
  method_option "without", :type => :array, :banner => "Exclude gems that are part of the specified named group."
  method_option "with", :type => :array, :banner => "Include gems that are part of the specified named group."
  method_option "help", :banner => "Print this help"
  def native_gems
    if options[:help]
      help("native_gems")
    else
      NativeGems.new(options).run
    end
  end
end

CLI.start(ARGV.dup.unshift("native_gems"), :debug => true)
